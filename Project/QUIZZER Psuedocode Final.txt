BEGIN

    IMPORT module 'time' (for test timer)

    BEGIN FUNCTION 'printMenu' takes parameters: (Dictionary) 'p_Info', (Float) 'p_Error'
        CLEAR Terminal

        IF p_Error IS 1
            THEN: 
                PRINT in:RED "That’s not a possible option."
                PRINT '' 

        IF p_Error IS 2.1
            THEN:
                PRINT in:RED "That’s too many questions."
                PRINT ''

        IF p_Error IS 2.2
            THEN:
                PRINT in:RED "That’s not enough questions."
                PRINT ''

        IF p_Error IS 3.1
            THEN:
                PRINT in:RED "Time limit must not exceed 1000 minutes."
                PRINT ''

        IF p_Error IS 3.2
            THEN:
                PRINT in:RED "That’s not enough time."
                PRINT ''


        IF p_Info['Menu'] IS 'Home'                                                   (Home page)
            THEN:
                PRINT 'Hi! Welcome to Quizzer.'
                PRINT '' 
                PRINT '[1] Take Test.'
                PRINT '[2] View Past Results.'
                PRINT ''
                PRINT 'Select an option by entering a number from above.'
                PRINT g_Prompt

        IF p_Info['Menu'] IS 'Results_Main'                                           (Results selector page)   (has: p_Info['Results'])
            THEN:
                PRINT in:GREY 'Home > Past Results'
                PRINT '' 

                p_I = 0
                REPEAT:
                    PRINT p_I & p_Info['Results'][p_I]                                (A list of test results are given through p_Info. This prints those results.)
                    p_I = p_I + 1
                UNTIL p_I IS length of p_Info['Results']
                
                PRINT 'Enter a past test number to view the result.'
                PRINT 'Enter [e] to go back.'
                PRINT g_Prompt

        IF p_Info['Menu'] IS 'Results_ViewResult'                                     (View a specific result)  (has: p_Info['Path'])
            THEN:
                PRINT in:GREY 'Home > Past Results > Math on 3/03/2024'
                PRINT '' 

                OPEN p_Info['Path'] AS p_OpenLog
                p_I = 0                                                                  
                REPEAT:                                                               (Print all the questions and answers)
                    p_I = p_I + 1                                                     (Starts at 1 because the first item in the file contains test information not questions) 
                    p_Row = p_OpenLog[p_I] 

                    IF p_Row['Selected Answer'] IS p_Row['Correct Answer']            >  (IF the answer is correct)
                        THEN:
                            PRINT ✅ & p_I & p_Row[p_I]['Question']                   >   >   (Print the question as correct)
                        ELSE:
                            PRINT ❌ & p_I & p_Row[p_I]['Question']                   >   >   (Print the question as incorrect)

                    IF p_Row['Selected Answer'] IS p_Row['Correct Answer']            >  (IF the answer is correct)
                        THEN: 
                            p_J = 0
                            REPEAT:                                                   >   >    (Print all possible answers in the question)
                                IF p_J IS p_Row['SelectedAnswer']                     >   >    (if that is the selected (and correct) answer in the question)
                                    THEN PRINT in:GREEN p_Row[p_I]['Answers'][p_J]    >   >   >     (print the answer in a green colour)              
                                    ELSE PRINT p_Row[p_I]['Answers'][p_J]   
                                p_J = p_J + 1
                            UNTIL p_J = length of p_Row['Answers']

                        ELSE:                                                         >   (ELSE if the answer wasnt correct)
                            p_J = 0
                            REPEAT:                                                   >   (Print all possible answers in the question)
                                IF p_J IS p_Row['SelectedAnswer']
                                    THEN PRINT in:RED p_Row[p_I]['Answers'][p_J]      >   (IF thats the SELECTED answer THEN print in:GREEN)             
                                    ELSE IF p_J IS p_Row['CorrectAnswer']            
                                        THEN PRINT in:GREEN p_Row[p_I]['Answers'][p_J]>   (ELSE IF thats the CORRECT answer THEN print in:RED)
                                        ELSE PRINT p_Row[p_I]['Answers'][p_J]         >   (ELSE just print the possible answer normally)
                                p_J = p_J + 1
                            UNTIL p_J = length of p_Row['Answers']      

                    PRINT 'Selected: ' & p_Row['SelectedAnswer']                      >   (Print the question user selected)
                    PRINT 'Correct:  ' & p_Row['CorrectAnswer']                       >   (Print the correct answer)   
                UNTIL p_I IS length of p_OpenLog

                PRINT g_Separator

                PRINT p_OpenLog[0]['Type'] & ' on ' & p_OpenLog[0]['Subject']        (Subject of test)
                p_I = 0
                REPEAT:                                                              (Topics of test)
                    PRINT '- ' & p_OpenLog[0]['Topics'][p_I]
                    p_I = p_I + 1
                UNTIL p_I IS length of p_OpenLog[0]['Topics']

                PRINT g_Separator
                PRINT 'You Scored: ' & p_OpenLog[0]['Score']                         (Score of test)
                PRINT 'Time Taken: ' & p_OpenLog[0]['TimeTaken'] & ' minutes taken out of ' & p_OpenLog[0]['TimeAllocated'] & ' minutes.' (Time taken vs time allocated)
                PRINT g_Separator
                PRINT 'Enter [e] to go back.'
                PRINT 'Enter [d] to delete this test.'
                PRINT g_Prompt

                CLOSE p_Info['Path']
        
        IF p_Info['Menu'] IS 'Results_DeleteResult'                                   (Delete a result)         (has: p_Info['ResultName'])
            THEN:
                PRINT in:GREY 'Home > Past Results > ' & p_Info['ResultName'] & ' > Deletion'
                PRINT ''
                PRINT 'Are you sure you want to delete this test?'
                PRINT '' 
                PRINT 'Enter [e] to go back.' 
                PRINT 'Enter [d] to delete this test.'
                PRINT g_Prompt


        IF p_Info['MENU'] IS 'TestSetup_Main'                                         (Test selector page)      (has: p_Info['Subjects'])
            THEN:
                PRINT in:GREY 'Home > Take a Test'
                PRINT ''
                PRINT 'We found ' & length of p_Info['Subjects'] & ' subjects.'
                PRINT ''

                p_I = 0
                REPEAT:                                                               (Print the subjects. Subjects are provided as a list in p_Info['Subjects'])
                    PRINT p_I+1 & p_Info['Subjects'][p_I]                             >     (p_I + 1 is because p_I starts at 0)
                    p_I = p_I + 1
                UNTIL p_I IS length of p_Info['Subjects'] 

                PRINT 'Select a subject by entering the corresponding number.'
                PRINT in:GREY 'Enter [e] to go back.'
                PRINT g_Prompt

        IF p_Info['MENU'] IS 'TestSetup_Topics'                                       (Subject selector page)   (has: p_Info['Subject'], p_Info['Topics'], p_Info['ChosenTopics'])
            THEN:
                PRINT in:GREY 'Home > Take a Test > ' & p_Info['Subject']
                PRINT '' 
                PRINT 'We found' & length of p_Info['Subject'] & ' question sets inside of Mathematics.'
                PRINT '' 

                p_I = 0
                REPEAT:                                                               (Print all the topics inside that subject)
                    IF p_Info['Subject'][p_I] IN p_Info['ChosenTopics']
                        THEN PRINT '✅' & p_I & p_Info['Subject'][p_I]                 >     (The ✅and• indicators show if the topic is selected or not.)
                        ELSE PRINT '•' & p_I & p_Info['Subject'][p_I]
                UNTIL p_I IS length of p_Info['Subject']

                PRINT 'Enter the corresponding number to add/remove a topic.'
                PRINT 'Enter [s] when you’re done.'
                PRINT in:GREY 'Enter [e] to go back.'
                PRINT g_Prompt

        IF p_Info['Menu'] IS 'TestSetup_Questions'                                    (Choose amt of questions) (has: p_Info['MaxQuestions'])
            THEN:
                PRINT in:GREY 'Home > Take a Test > Mathematics > Questions'
                PRINT '' 
                PRINT 'Enter the amount of questions in the test.'
                PRINT in:GREY 'The max. for your selection is ' & in:WHITE p_Info['MaxQuestions']  (Shows max. amt. of questions through p_Info['MaxQuestions'])
                PRINT '' 
                PRINT in:GREY 'Enter [e] to go back.'
                PRINT g_Prompt

        IF p_Info['Menu'] IS 'TestSetup_Time'                                         (Choose amt of time)      (has: p_Info['RecommendedTime'])
            THEN: 
                PRINT in:GREY 'Home > Take a Test > Mathematics > Questions > Time' 
                PRINT '' 
                PRINT 'Enter the amount of time you want to allocate for your test.' 
                PRINT in:GREY 'We recommend ' & p_Info['RecommendedTime'] & ' minutes for your current selection.' (Recommended amount of time given by p_Info['RecommendedTime'])
                PRINT '' 
                PRINT in:GREY 'Enter [e] to go back.'
                PRINT '(minutes)' & g_Prompt                                          (The input is an integer which translates to minutes, i.e. '2' = 2 minutes long)
        
        IF p_Info['Menu'] IS 'TestSetup_FinalCheck'                                   (Check before starting)   (has: p_Info['Subject'], p_Info['Type'], p_Info['Topics'], p_Info['AmtQuestions'], p_Info['AmtTime'])
            THEN:
                PRINT in:GREY 'Home > Take a Test > Mathematics > Questions > Time > Final Steps'
                PRINT '' 
                PRINT in:GREY 'Just checking, you’re about to start a' & in:WHITE p_Info['Subject'] & in:WHITE p_Info['Type'] & in:GREY 'on:' (Show the subject and test type)
                
                p_I = 0
                REPEAT:                                                               (Show the topics to be tested on.)
                    PRINT '- ' & p_Info['Type'][p_I]                                  
                UNTIL p_I IS length of p_Info['Topics']

                PRINT in:GREY 'This test will go for ' & in:WHITE p_Info['AmtTime'] & in:WHITE ' minutes' & in:GREY ' and have' & in:WHITE p_Info['AmtQuestions'] & in:GREY ' questions.' (Show the time allocated and amt of questions to be tested on)
                PRINT '' 
                PRINT 'Enter [s] to start.'
                PRINT 'Enter [e] to go back.'
                PRINT g_Prompt


        IF p_Info['Menu'] IS 'Test_Main'                                              (In actual test)          (has: p_Info['Subject'], p_Info['Type'], p_Info['QuestionNo.'], p_Info['AmtQuestions'], p_Info['TimeRemaining'], p_Info['Question'], p_Info['PossibleAnswers'], p_Info['SelectedAnswer'])i
            THEN: 
                PRINT in:GREY p_Info['Subject'] & in:GREY p_Info['Type'] & in:GREY ' > ' & p_Info['QuestionNo.'] & '/' & p_Info['AmtQuestions'] (NavBar with the amount of questions remaining and subject.)
                PRINT in:GREY p_Info['TimeRemaining'] & ' minutes remaining'          (Shows time remaining)
                PRINT '' 
                PRINT p_Info['Question']                                              (Shows the question)

                p_I = 0
                REPEAT:                                                               (Shows the possible answers that the user can select from)
                    IF p_Info['SelectedAnswer'] IS NO_VALUE                           (Checks if that answer has been selected, and colours the answer accordingly)
                        THEN PRINT p_Info['PossibleAnswers'][p_I]
                        ELSE IF p_Info['SelectedAnswer'] IS p_Info['PossibleAnswers'][p_I]
                            THEN PRINT in:CYAN '•' & in:CYAN p_Info['PossibleAnswers'][p_I] & in:CYAN 'selected'
                            ELSE PRINT p_Info['PossibleAnswers'][p_I]
                    p_I = p_I + 1
                UNTIL p_I IS length of p_Info['PossibleAnswers']

                PRINT '' 
                PRINT 'Enter the corresponding letter to select your answer.'

                IF p_Info['QuestionNo.'] IS 1                                         (Makes sure that the option to go forward/back is not presented on the last/first question respectively.)
                    THEN:
                        PRINT in:GREY 'Enter [s] to go forward.'
                        PRINT in:GREY 'Enter [k] to finish test.'
                    ELSE IF p_Info['QuestionNo.'] IS p_Info['AmtQuestions']
                        THEN:
                            PRINT in:GREY 'Enter [e] to go back.'
                            PRINT in:GREY 'Enter [k] to finish test.'
                        ELSE: 
                            PRINT in:GREY 'Enter [e] to go back.'
                            PRINT in:GREY 'Enter [s] to go forward.'
                            PRINT in:GREY 'Enter [k] to finish test.'
                PRINT g_Prompt
                
        IF p_Info['Menu'] IS 'Test_PreExit'                                           (When user wants to finish) (has: p_Info['AmtQuestions'], p_Info['UnansweredQuestions'], p_Info['Subject'], p_Info['Type'])
            THEN:
                PRINT in:GREY p_Info['Subject'] & in:GREY p_Info['Type'] & in:WHITE ' Test > All questions' (NavBar with subject)

                p_I = 0
                REPEAT:
                    IF p_I IS IN p_Info['UnansweredQuestions']                        (Creates a menu with all the questions, and colours unanswered questions in red)
                        THEN PRINT in:RED '[' & p_I & '] '
                        ELSE PRINT '[' & p_I & '] '
                    p_I = p_I + 1
                UNTIL p_I IS length of p_Info['AmtQuestions']

                PRINT in:WHITE 'Questions in ' & in:RED 'red' & in:WHITE "aren't answered."
                PRINT 'Enter any question number to jump to that question.'
                PRINT in:GREY 'Enter [k] to finish test.'
                PRINT in:GREY 'Enter [e] to go back.'
                PRINT g_Prompt
                
        IF p_Info['Menu'] IS 'Test_End'                                               (End of the test)         (has: p_Info['Subject'], p_Info['Type'])
            THEN:
                PRINT in:GREY p_Info['Subject'] & in:GREY p_Info['Type'] & in:WHITE ' > End'  
                PRINT '' 
                PRINT 'End of test! 🎉'
                PRINT ''
                PRINT 'Enter [s] to view results.'
                PRINT 'Enter [e] to go back to the home screen.'
                PRINT g_Prompt

        IF p_Info['Menu'] IS 'Test_OutOfTime'                                         (Time limit ran out)      (has: p_Info['Subject'], p_Info['Type'])
            THEN:
                PRINT in:GREY p_Info['Subject'] & in:GREY p_Info['Type'] & in:WHITE ' > End'  
                PRINT '' 
                PRINT 'Out of time! ⌚'
                PRINT 'Your last answer wasn’t recorded.'                             (As the timer only can update after input, the program simply does not record the last input and ends the quiz.)
                PRINT ''
                PRINT 'Enter [s] to view results.'
                PRINT 'Enter [e] to go back to the home screen.'
                PRINT g_Prompt   
    END FUNCTION



    BEGIN FUNCTION 'checkForErrors' takes parameters: (Float) 'c_Error', (--) 'c_Input', (List) 'c_PossibleOptions'
        IF c_Error IS 1                                                               (Returns error code 1)                                        
            THEN:
                c_I = 0
                REPEAT:
                    IF c_Input IS IN c_PossibleOptions
                        THEN EXIT WITH 0                                              (If the input is within the possible options then the function will end with a 0)
                UNTIL c_I IS length of c_PossibleOptions
                EXIT WITH 1                                                           (Because the function ends when a valid input is found, this will only be reached when the input ISNT a valid option.)

        IF c_Error IS 3                                                               (Returns error code 1/2.1/2.2 for selecting the amount of questions.)
            THEN:
                IF type of c_Input IS INTEGER                                         (Checks if input is a number and not a string)
                    THEN:  
                        IF c_Input > c_PossibleOptions[0]
                            THEN EXIT WITH 3.1
                            ELSE IF c_Input < 1                                       (You can't start a test with 0 or negative questions.)
                                THEN EXIT WITH 3.2
                                ELSE EXIT WITH 0
                    ELSE 
                        THEN
                            IF c_Input IN c_PossibleOptions
                                THEN EXIT WITH 0
                                ELSE EXIT WITH 1

        IF c_Error IS 2                                                               (Returns error code 1/2.1/2.2 for selecting the amount of questions.)
            THEN:
                IF type of c_Input IS INTEGER                                         (Checks if input is a number and not a string)
                    THEN:  
                        IF c_Input > c_PossibleOptions[0]
                            THEN EXIT WITH 2.1
                            ELSE IF c_Input < 1                                       (You can't start a test with 0 or negative questions.)
                                THEN EXIT WITH 2.2
                                ELSE EXIT WITH 0
                    ELSE 
                        THEN
                            IF c_Input IN c_PossibleOptions
                                THEN EXIT WITH 0
                                ELSE EXIT WITH 1



    BEGIN FUNCTION 'obtainValidInput' takes parameters (Dictionary) 'o_PrintMenuInfo', (Float) 'o_ErrorToCheck', (List) 'o_PossibleInputs'
        REPEAT                                                                        (Creates a loop that will always run until a valid input is entered.)
            o_ErrorCode = NO_VALUE
            CALL_FUNCTION printMenu WITH o_PrintMenuInfo, o_ErrorCode                 >     (Prints the specified page)
            INPUT o_Input                                                             
            o_ErrorCode = CALL_FUNCTION checkForErrors WITH o_ErrorToCheck, o_Input, o_PossibleInputs > (Check if the input is valid. If it's not valid, then o_ErrorCode will have an error code)    
        UNTIL o_ErrorCode = NO_VALUE                                                  (As o_ErrorCode will always be the error associated with the invalid input, having NO_VALUE means the input is valid and has no issues.)
        EXIT WITH o_Input                                                             (Returns the input given. This will only return when the input is checked to be valid.)
    END FUNCTION




    {constant} g_Separator = '-----------------------'
    {constant} g_Prompt = '>>'

    REPEAT  	                                                                  (Create a main loop that runs forever)

        g_Menu = (empty list)                                                     (Use a list for submenus)
        ADD CALL_FUNCTION obtainValidInput WITH {'Menu':'Home'}, 1, [1,2] TO g_Menu (HOME MENU)

        IF g_Menu[0] IS 1                                                         (VIEW PAST RESULTS)
            THEN
                REPEAT                                                                >     (Creates a loop so the user can go back)
                    g_Logs = RETRIEVE '.../pastresults'                               >     (Retrieve a list of past results in the .../pastresults folder)
                    g_AllPossibleOptions = (empty list)
                    ADD 'e' TO g_AllPossibleOptions                                   >     (So the user can exit)
                    
                    g_I = 0
                    REPEAT                                                            >     (Although a list of logs are provided, the obtainValidInput function cannot use this info to determine the possible outputs,)
                        g_I = g_I + 1                                                       (hence the program creates a list of the possible options by looping through g_Logs.)
                        ADD g_I TO g_AllPossibleOptions
                    UNTIL g_I IS length of g_Logs

                    g_PastResult = CALL_FUNCTION obtainValidInput WITH {'Menu':'Results_Main','Results':g_Logs}, 1, g_AllPossibleOptions >     (Print the past results page and wait for valid input)
                    
                    IF g_PastResult IS 'e'                                              
                        THEN g_Menu[0] = 0                                            >    (If user wants to go back)
                        ELSE                                                          >    (If user wants to view a specific test)
                            REPEAT
                                g_Menu[1] = CALL_FUNCTION obtainValidInput WITH {'Menu':'Results_ViewResult', 'path':g_Logs[g_PastResult]}, 1, [e,d] >     >    (Prints the specified result and waits for input. Possible inputs are to delete test [d] or exit [e])  (One loop further in, therefore the program goes to the next index)
                                
                                IF g_Menu[1] = 'e'                                    >     >      (If user wants to go back)
                                    THEN g_Menu[1] = 0
                                    ELSE                                              >     >      (If user wants to delete)
                                        g_Menu[2] = CALL_FUNCTION obtainValidInput WITH {'Menu':'Results_DeleteResult', 'ResultName':g_Logs[g_PastResult]}, 1, [e,d] >     >      >       (Prompt user about the deletion)
                                        
                                        IF g_Menu[2] IS 'd'                           >     >     >     (The result is deleted and the program goes back to showing a list of all the results.)
                                            THEN
                                                DELETE g_Logs[g_PastResult]
                                                g_Menu[1] = 0
                                                g_Menu[2] = 0
                                            ELSE                                      >     >     >     (The result is NOT deleted and the program simply goes back to showing the result)
                                                g_Menu[2] = 0
                            UNTIL g_Menu[1] = 0
                UNTIL g_Menu[0] IS 0

            ELSE                                                                  (Because the program has checked that only valid inputs are entered, an else if condition is not nessesary)
                REPEAT                                                            (CHOOSE SUBJECTS PAGE)
                    g_AllSubjects = RETRIEVE '.../subjects'                       >     (Retrieve all subject folders)
                    g_AllPossibleOptions = (empty list)
                    ADD 'e' TO g_AllPossibleOptions
                    g_I = 0
                    REPEAT                                                        >     (Create a list of all the possible options the user can choose from)
                        g_I = g_I + 1
                        ADD g_I TO g_AllPossibleOptions
                    UNTIL g_I IS length of g_AllSubjects

                    g_ChosenSubject = CALL_FUNCTION obtainValidInput WITH {'Menu':'TestSetup_Main','Subjects':g_AllSubjects}, 1, g_AllPossibleOptions > (Prints the page for choosing the subject, and waits for valid input)

                    g_Menu[1] = 1
                    
                    IF g_ChosenSubject IS 'e'                                    >      (If user wants to go back)
                        THEN g_Menu[0] = 0
                        ELSE                                                     >      (User has chosen a subject and now needs to select the topics.)
                            REPEAT                                               >      (This loop will not end until the user wants to start the test.)
                                g_Topics = RETRIEVE '.../subjects/' & g_ChosenSubject > (Get a list of all the topics from the specified subject)
                                g_ChosenTopics = (empty list)
                                g_AllPossibleOptions = (empty list)

                                g_I = 0
                                REPEAT                                           >      (Create a list of all possible topics to choose from)
                                    g_I = g_I + 1
                                    ADD g_I TO g_AllPossibleOptions 
                                UNTIL g_I IS length of g_Topics

                                g_Input = CALL_FUNCTION obtainValidInput WITH {'Menu':'TestSetup_Topics','Subject':g_ChosenSubject,'Topics':g_Topics,'ChosenTopics':g_ChosenTopics}, 1, g_AllPossibleOptions > (Prints a list of all the possible subjects and returns a valid input)

                                IF g_Input IS 'e'                                >     (If user wants to go back)
                                    THEN g_Menu[1] = 0
                                    ELSE IF g_Input IS 's'                       >     (If user wants to continue with setup and select the questions.)
                                        THEN
                                            g_I = 0
                                            g_MaxQuestions = 0
                                            REPEAT                               >      (Determine the maximum amount of questions possible)
                                                OPEN g_Topics[g_I] AS g_ReadFile
                                                g_MaxQuestions = g_MaxQuestions + length of g_ReadFile - 1
                                                g_I = g_I + 1
                                                CLOSE g_ReadFile
                                            UNTIL g_I IS length of g_ChosenTopics
                                            
                                            g_Menu[2] = 1
                                            REPEAT
                                                g_Input = CALL_FUNCTION obtainValidInput WITH {'Menu':'TestSetup_Questions', 'MaxQuestions':g_MaxQuestions}, 2, [g_MaxQuestions,'e'] > > (Print the select amt questions menu)
                                                IF g_Input IS 'e'
                                                    THEN
                                                        g_Menu[2] = 0
                                                    ELSE
                                                        g_Menu[3] = 1
                                                        g_ChosenAmtQuestions = g_Input
                                                        g_RecommendedTime = g_MaxQuestions * 0.75 >     (Calculate recommended time by allocating 45 seconds per question.)
                                                        
                                                        REPEAT
                                                            g_Input = CALL_FUNCTION obtainValidInput WITH {'Menu':'TestSetup_Time', 'RecommendedTime':g_RecommendedTime}, 2, [g] > (Ask user for the amount of time they want to allocate)
                                                            IF g_Input IS 'e'
                                                                THEN
                                                                    g_Menu[3] = 0
                                                                ELSE   
                                                                    g_Menu[4] = 1
                                                                    g_ChosenAmtTime = g_Input
                                                                    REPEAT 
                                                                        g_Input = CALL_FUNCTION obtainValidInput WITH {'Menu':'TestSetup_FinalCheck', 'Subject':g_ChosenSubject, 'Type':'Test', 'Topics':g_ChosenTopics, 'AmtTime':g_RecommendedTime}, 1, ['s','e'] > (Opens the final check page)
                                                                        IF g_Input IS 'e'
                                                                            THEN
                                                                                g_Menu[4] = 0
                                                                            ELSE
                                                                                (CREATE A QUESTION SET)
                                                                                g_test_Questions = (empty list)
                                                                                g_Temp = (empty string)
                                                                                g_I = 0

                                                                                REPEAT 
                                                                                    g_Temp = pick random from g_ChosenTopics[g_I]           > (Picks random item from the chosen topics)
                                                                                    OPEN g_Temp AS g_ReadFile                               > (A chosen topic is a file, and inside each file is the questions)
                                                                                    ADD pick random from g_ReadFile TO g_test_Questions     > (Program opens the file and choses a random item from that file. This is a random question, and program adds it to the questions list.)
                                                                                UNTIL g_I IS length of g_ChosenAmtQuestions           


                                                                                (START OF TEST!!!)
                                                                                g_test_QuestionNum = 1 
                                                                                g_test_EndTime = g_test_StartTime + g_ChosenAmtTime*60      > (as the chosen time is in minutes, we multiply the chosen time by 60 to get it in seconds. Then we add that to the start time to get the correct end time.)


                                                                                REPEAT (Loop for test)
                                                                                    g_Input = CALL_FUNCTION obtainValidInput WITH {'Menu':'Test_Main', 'Subject':g_ChosenSubject, 'Type':'Test', 'QuestionNo.':g_test_QuestionNum, 'AmtQuestions':g_ChosenAmtQuestions, 'TimeRemaining':g_test_CurrentTime, 'Question':g_test_Questions[g_test_QuestionNum]['Question'], 'PossibleAnswers':g_test_Questions[g_test_QuestionNum]['Answers'], 'SelectedAnswer':g_test_Questions[g_test_QuestionNum]['SelectedAnswer']}, 1, ['a','b','c','d','e','s','k'] (show the test question) 
                                                                                    
                                                                                    IF g_Input IS 'e':
                                                                                        THEN IF g_test_QuestionNum IS NOT 1:                > > (go back a question if the user isnt on the first question)
                                                                                            THEN g_test_QuestionNum = g_test_QuestionNum - 1
                                                                                            
                                                                                        ELSE IF g_Input IS 's':
                                                                                            THEN IF g_test_QuestionNum IS NOT length of g_test_Questions: > > (go forward a quetsion if the user isnt on the last question)
                                                                                                THEN g_test_QuestionNum = g_test_QuestionNum + 1
                                                                                            
                                                                                            ELSE IF g_Input IS 'k':                         > > (finish the test)
                                                                                                THEN END 
                                                                                                    
                                                                                                ELSE:
                                                                                                    g_test_Questions[g_test][g_test_QuestionNum]['SelectedAnswer'] = g_Input > > (add selected answer to the input section)
                                                                                    
                                                                                    g_test_StartTime = FROM module 'time' get current epoch time in seconds > > (from the time module, we get the current epoch time in seconds.)
                                                                                    g_test_CurrentTime = g_test_EndTime - g_test_StartTime > > (calculate the elpased time)

                                                                                    IF g_test_CurrentTime < 0:                             > > (if the user has gone over the time limit, the current time will be negative. End the test if this happens.)
                                                                                        THEN END

                                                                                UNTIL END

                                                                                IF g_test_CurrentTime < 0: (this means that the test ended prematurely due to the user running out of time)
                                                                                    THEN:
                                                                                        g_Input = CALL_FUNCTION obtainValidInput WITH {'Menu':'Test_OutOfTime', 'Subject':g_ChosenSubject, 'Type':'Test'}, 1, ['s','e'] (End of test due to time ran out.)
                                                                                    ELSE: (this means the user just ended the test)
                                                                                        g_Input = CALL_FUNCTION obtainValidInput WITH {'Menu':'Test_End', 'Subject':g_ChosenSubject, 'Type':'Test'}, 1, ['s','e'] (End of test due to user input.)

                                                                                IF g_Input IS 's':
                                                                                    THEN g_Menu = [1] (open past results page)
                                                                                    ELSE g_Menu = [] (open home page)                                                                                
                                                                            
                                                                    UNTIL g_Menu[4] IS 0
                                                                        
                                                        UNTIL g_Menu[3] IS 0
                                                
                                            UNTIL g_Menu[2] IS 0 

                                        ELSE                                     >     (User adds more topics to the test.)
                                            IF g_Topics[g_Input] IN g_ChosenTopics
                                                THEN ADD g_Topics[g_Input] TO g_ChosenTopics
                                                ELSE REMOVE g_Topics[g_Input] FROM g_ChosenTopics
                                            
                            UNTIL g_Menu[1] IS 0
                    


                UNTIL g_Menu[0] IS 0

    UNTIL END

END